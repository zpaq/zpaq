(lz1.cfg

(C) 2011 Dell Inc. Written by Matt Mahoney
Licensed under GPL v3, http://www.gnu.org/copyleft/gpl.html)

comp 0 0 0 24 1
  0 icm 12 (sometimes "0 cm 20 48" will compress better)
hcomp
  (c=state: 0=init, 1=expect LZ77 literal or match code,
   2..4=expect n-1 offset bytes,
   5..68=expect n-4 literals)
  b=a (save input)
  a=c a== 1 if (expect code ccxxxxxx as input)
    (cc is number of offset bytes following)
    (00xxxxxx means x+1 literal bytes follow)
    a=b a>>= 6 a&= 3 a> 0 if
      a++ c=a (high 2 bits is code length)
      *d=0 a=b a>>= 3 hashd
    else
      a=b a&= 63 a+= 5 c=a (literal length)
      *d=0 a=b hashd
    endif
  else
    a== 5 if (end of literal)
      c= 1 *d=0
    else
      a== 0 if (init)
        c= 124 *d=0 (5+length of postprocessor)
      else (literal or offset)
        c--
        (model literals in order 1 context, offset order 0)
        a> 5 if *d=0 a=b hashd endif
      endif
    endif
  endif

  (model parse state as context)
  a=c a> 5 if a= 5 endif hashd
  halt
pcomp lzpre c ; (code below is equivalent to "lzpre d")
  (LZ77 decoder: b=i, c=c d=state r1=len r2=off
    state = d = 0 = expect literal or match code
                1 = decoding a literal with len bytes left
                2 = expecting last offset byte of a match
                3,4 = expecting 2,3 match offset bytes
    i = b = position in 16M output buffer
    c = c = input byte
    len = r1 = length of match or literal
    off = r2 = offset of match back from i
  Input format:
    00llllll: literal of length lllllll=1..64 to follow
    01lllooo oooooooo: length lll=5..12, offset o=1..2048
    10llllll oooooooo oooooooo: l=1..64 offset=1..65536
    11llllll oooooooo oooooooo oooooooo: 1..64, 1..2^24)
  c=a a=d a== 0 if
    a=c a>>= 6 a++ d=a
    a== 1 if (state?)
      a+=c r=a 1 a=0 r=a 2 (literal len=c+1 off=0)
    else
      a== 2 if a=c a&= 7 r=a 2 (short match: off=c&7)
        a=c a>>= 3 a-= 3 r=a 1 (len=(c>>3)-3)
      else (3 or 4 byte match)
        a=c a&= 63 a++ r=a 1 a=0 r=a 2 (off=0, len=(c&63)-1)
      endif
    endif
  else
    a== 1 if (writing literal)
      a=c *b=a b++ out
      a=r 1 a-- a== 0 if d=0 endif r=a 1 (if (--len==0) state=0)
    else
      a> 2 if (reading offset)
        a=r 2 a<<= 8 a|=c r=a 2 d-- (off=off<<8|c, --state)
      else (state==2, write match)
        a=r 2 a<<= 8 a|=c c=a a=b a-=c a-- c=a (c=i-off-1)
        d=r 1 (d=len)
        do (copy and output d=len bytes)
          a=*c *b=a out c++ b++
        d-- a=d a> 0 while
        (d=state=0. off, len don't matter)
      endif
    endif
  endif
  halt
end
