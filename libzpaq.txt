                           LIBZPAQ v0.04
                    Matt Mahoney, Oct. 20, 2010

Libzpaq is a C++ application programming interface library for compression
and decompression of files or objects in ZPAQ format. Data compressed
with libzpaq is compatible with the GPL programs zpaq, zp, zpipe, and
unzpaq found at http://mattmahoney.net/dc/#zpaq
The format is described in http://mattmahoney.net/dc/zpaq1.pdf

Libzpaq v0.04 is released to the public domain. There are no restrictions
on the use of this code. The software is provided "as is" with
no warranty.

The LIBZPAQ v0.04 software consists of the following files:

  libzpaq.txt  - Documentation, this file.
  libzpaq.h    - Header file to be included by the application developer.
  libzpaq.cpp  - Source code file to be linked by the application developer.
  libzpaqo.cpp - Source code for optimized models fast.cfg, mid.cfg, max.cfg.

To compile an application program (g++):

  g++ program.cpp libzpaq.cpp libzpaqo.cpp -o program -DNDEBUG

libzpaq.h must be available to the compiler.
Use the -DNDEBUG option to turn off run time checks for production code.
You can use other optimization options as appropriate.

The library provides functions compress() and decompress() for
simple compression of files or arrays at 3 different compression
levels (fast, mid, max). To support archives, checksums, custom
error handling, and arbitrary compression models, the library
has classes SHA1, Compressor, and Decompresser

To use the library to compress to and from <stdio.h>, insert the
following code into your program. It may go after other #include
files but before using any of the library functions.

  struct InputFile: public libzpaq::Reader {
    FILE *f;
    InputFile(FILE *in): f(in) {}
    int get() {return getc(f);}
  };

  struct OutputFile: public libzpaq::Writer {
    FILE *f;
    OutputFile(FILE *out): f(out) {}
    void put(int c) {putc(c, f);}
  };

  namespace libzpaq {
    void error(const char* msg) {
      fprintf(stderr, "libzpaq error: %s\n", msg);
      exit(1);
    }
  }
  #include "libzpaq.h"

libzpaq will call get() to read bytes (0..255), or -1 at end of input.
It will call put() to write bytes. You can overload these functions
to compress or decompress to memory or other objects.

libzpaq will call error() with an English language message in case of
an error such as out of memory or corrupted input. You can customize
error handling.


SIMPLE FILE COMPRESSION

To compress from open FILE* in to FILE* out at level 1, 2, or 3:

  InputFile i(in);
  OutputFile o(out);
  libzpaq::compress(&i, &o, level);

To decompress from FILE* in to FILE* out:

  libzpaq::decompress(&i, &o);

The 3 compression levels are:
  1 = fast.cfg (fastest)
  2 = mid.cfg  (better)
  3 = max.cfg  (best but slowest)


OBJECT COMPRESSION

The arguments in and out to compress() and decompress() can be
any pointer types derived from Reader and Writer and that
define get() and put() as shown above. For example, the following
class would allow you to output to a string by appending to it
and input by removing the first character.

  class String: public libzpaq::Reader, public libzpaq::Writer {
    std::string s;
  public:

    // remove and return first byte of *s
    int get() {
      if (*s=="") return -1;  // "EOF"
      int c=(*s)[0]&255;      // get first byte as an unsigned 0..255
      *s=(*s).substr(1);      // remove first byte
      return c;
    }

    // append one byte to *s
    void put(int c) {
      *s += char(c);
    }
  };

Then to compress or decompress:

  String in, out;
  compress(&in, &out, 3);  // max compression
  decompress(&in, &out);


ARCHIVE HANDLING

A ZPAQ archive consists of a sequence of independent blocks with an
optional start tag to make blocks easier to find when mixed with other
data. A block consists of a sequence of segments that must be decompressed
in order from the beginning of the block. Each block uses a compression
algorithm described in the block header. Each segment describes an array,
a file, or a part of a file. A segment begins with an optional file name
and an optional comment and ends with an optional SHA-1 checksum for
integrity checking.

compress(in, out, level) produces a compressed stream with one block
containing one segment with no filename, no comment, and no checksum.
The level is one of 3 predefined models (1=fast, 2=mid, 3=max).
It will not write start tags.

decompress(in, out) concatenates all of the decompressed output of
all segments in all blocks. It will handle any valid compressed data,
not just the 3 models selected by the compression level. It will
ignore the filename and comment fields. It will not perform integrity
checking and ignore any stored checksums. The decompressed data
may be mixed with other data provided that the first block after
any non-ZPAQ data is preceded by a start tag.

The classes Compressor and Decompresser in namespace libzpaq give
finer control. With class Compressor it is possible to produce
any valid ZPAQ stream. With class Decompresser it is possible
to read the compression algorithm, filename and comment fields, verify
checksums, and estimate memory usage before it is allocated. The classes
are as follows:

namespace libzpaq {

// For computing SHA-1 checksums
class SHA1 {
public:
  void put(int c);      // hash 1 byte
  double size();        // number of bytes hashed since last result
  const char* result(); // finish, return 20 byte hash, and reset
};

// For archive compression
class Compressor {
public:
  void setOutput(Writer* out);
  void writeTag();
  void startBlock(int level);  // level=1,2,3
  void startBlock(const char* hcomp);
  void startSegment(const char* filename = 0, const char* comment = 0);
  void postProcess(const char* pcomp = 0);
  void setInput(Reader* in);
  bool compress(int n = 0);  // n bytes, 0=all, return true until done
  void endSegment(const char* sha1string = 0);  // reads 20 bytes
  void endBlock();
};

// For archive decompression and listing contents
class Decompresser {
public:
  void setInput(Reader* in);
  bool findBlock(double* memptr = 0);
  void hcomp(Writer* out2);
  bool findFilename(Writer* out2 = 0);
  void readComment(Writer* = 0);
  void setOutput(Writer* out);
  void setSHA1(SHA1* sha1ptr);
  bool decompress(int n = 0);  // n bytes, 0=all, return true until done
  bool pcomp(Writer* out2);
  void readSegmentEnd(char* sha1string = 0);  // writes 21 bytes
};
}  // end namespace libzpaq


COMPRESSION

compress() is defined in namespace libzpaq as follows:

void compress(Reader* in, Writer* out, int level) {
  assert(level>=1 && level<=3);
  Compressor c;
  c.setInput(in);
  c.setOutput(out);
  c.startBlock(level);
  c.startSegment();
  c.postProcess();
  c.compress();
  c.endSegment();
  c.endBlock();
}

A ZPAQ stream consists of one or more blocks. Each block must begin
with startBlock() and end with endBlock(). A block may contain one or
more segments. Each segment must start with startSegment() and end
with endSegment(). The first (and only first) segment of a block
must be followed by postProcess() prior to compress(). compress()
may otherwise be called only within segments. setInput() and setOutput()
may be called at any time to set the input source and output destination.
However, setInput() must be called before the first call to compress().
setOutput() must be called before any output, which begins with
startBlock().

startBlock(level) initializes the compression algorithm to one of
3 predefined levels (1=fast, 2=mid, 3=max). Alternatively,

  void startBlock(const char* hcomp);
  ...
  void postProcess(const char* pcomp = 0);

may be called with an arbitrary compression model defined in two
strings, hcomp and pcomp. The format for these strings is described
in the ZPAQ reference. The first 2 bytes of the string give the length
of the rest of the string in little-endian (LSB, MSB) format.

hcomp describes the COMP and HCOMP sections of the compression model,
corresponding to these sections in a zpaq configuration file.
pcomp describes the PCOMP section, which describes the postprocessing
algorithm. If pcomp is 0, then no postprocessing is performed. Otherwise
it is the responsibility of the application to preprocess the input data
before compression so that the postprocessor restores it to its original
value. The 3 default levels do no postprocessing.

  void startSegment(const char* filename = 0, const char* comment = 0);

optionally write a filename and comment to the segment header.
If these fields are omitted, then they are left empty. Normally
the filename field is a hint to the decompressor to name the file
to be extracted for this segment. If the field is empty, the normal
behavior is to concatenate the output to the previous segment,
which might be in a different block.

The comment may be any string. Usually this is the size of the input
file as a decimal string. The size may also be followed by a space
and a timestamp for archivers that restore timestamps. It would
have the format "size yyyy/mm/dd hh:mm:ss" for example,
c.startSegment("book1", "768771 1999/12/31 23:59:59");

  bool c.compress(int n = -1);

tells the compressor to compress n bytes of input, or compress to
end of input if n < 0 or the argument is omitted. It returns true
if there is still more input to compress or false otherwise. This
can be used to show progress, for example:

  while (c.compress(10000))
    printf("%ld -> %ld \r", ftell(in), ftell(out));

If n < 0, then compress() always compresses all of its input and
returns false.

When appending to non-ZPAQ data, the first startBlock() should
be preceded by writeTag(). This writes a 13 byte fixed string
which is unlikely to appear in most data without knowing its value.
When non-ZPAQ data is input to a decompressor, it will
search for the tag and ignore any input until it is found. The
tag must be immediately followed by the start of a block.
setOutput() should be called prior to writeTag(). It takes no
arguments.


CHECKSUMS

  void endBlock(const char* sha1string = 0);

writes a 20 byte SHA-1 hash at the end of a segment. It is intended
to be a hash of the input before preprocessing (if any) and before
compression. A decompresser can compute the hash of the output
and compare it with the stored value. It is believed to be
computationally infeasible to find two different inputs with the same
checksum. If sha1string is omitted or 0, then no checksum is written
and the decompressor will not be able to verify its output.

The SHA1 class may be used to compute the checksum and size of a byte
sequence. For example, the following finds the size and checksum
of a file.

  SHA1 sha1;
  int ch;
  FILE* in = fopen(filename, "rb");
  while ((ch = getc(in)) != EOF)
    sha1.put(ch);
  double size = sha1.size();  // in bytes, up to 2^61 - 1
  const char* sha1string = sha1.result();  // 20 byte hash

put(c) updates the hash value with the byte c and increments
the value returned by size(). result() calculates the final hash value
and has the side effect of resetting the hash and resetting size()
to return 0.0. Thus, size() should be called first. The pointer
returned by result() remains valid until the next call to result()
or the SHA1 object is destroyed. It is typically used like this:

  for (each block...) {
    c.startBlock(level);
    bool first_segment = true;
    for (each segment in block...) {

      // ... get size and sha1string as above

      rewind(in);
      char sizestring[20];
      sprintf(sizestring, "%1.0f", size);
      c.startSegment(filename, sizestring);
      if (first_segment)
        c.postProcess();
      first_segment = false;
      c.compress();
      c.endSegment(sha1.result());
    }
    c.endBlock();
  }

The largest value that sha1.size() can return is
2^61 - 1 = 2305843009213693951, which is 19 digits.


DECOMPRESSION

The function decompress(in, out) is defined as follows:

void decompress(Reader* in, Writer* out) {
  Decompresser d;
  d.setInput(in);
  d.setOutput(out);
  while (d.findBlock()) {       // don't calculate memory
    while (d.findFilename()) {  // discard filename
      d.readComment();          // discard comment
      d.decompress();           // to end of segment
      d.readSegmentEnd();       // discard sha1string
    }
  }
}


setInput() and setOutput() may be called to redirect the input and
output at any time. However setInput() must be called before the
first call to findBlock(). setOutput() must be called before the
first call to decompress(). The other functions must be called
in exactly the order shown.

  bool findBlock(double* memptr = 0);

findBlock() scans forward to the start of the next block. It either
immediately reads the start of a block, or otherwise searches for
a start tag immediately followed by the start of a block. If it
does not find a block, it returns false. Otherwise if memptr is
present and not 0, then it calculates the approximate memory
in bytes that will be required to decompress data in this block
and store the result in *memptr. Then it returns true. The
memory is not allocated until the first call to decompress().
It remains allocated until the end of the block.

  bool findFilename(Writer* out2 = 0);

reads either the start of a segment or an end of block (EOB) symbol.
If it reads EOB then it returns false. If it finds another segment
in the current block, then it reads the filename field and if out2
is passed and not 0, then it writes the filename to out2.

  void readComment(Writer* out2 = 0);

reads the comment field from the segment header, and if out2 is
passed, writes the comment to it. It must be called immediately
after findFilename() returns true.

For example, the following will store the filename and comment in Strings
as defined earlier.

  String filename, comment;
  while (d.findFilename(&filename)) {
    d.readComment(&comment);
    d.decompress();
    d.readSegmentEnd();
    filename = comment = "";
  }

To decompress:

  bool decompress(int n = -1);

If n < 0 or omitted, then decompress() will decompress the entire
segment and return false. Otherwise it will decode n bytes and pass
them to the postprocessor and return true if there is any data
remaining in the current segment to decompress. Thus, one could
report progress like this every 10 KB.

  while (d.decompress(10000))
    printf("%ld -> %ld\n", ftell(in.f), ftell(out.f));

The actual output may be more or less than n bytes if the data is
postprocessed. It may also be less than n if the end of the segment
is reached.

  void hcomp(Writer* out2)
  bool pcomp(Writer* out2)

write the HCOMP and PCOMP sections of the last block header to out2.
The output format is suitable for passing to Compress::startBlock(hcomp)
and Compress::postProcess(pcomp) respectively. The first 2 bytes of
output is the length of the rest of the output in little-endian
(LSB, MSB) format. The maximum possible output is 65537 bytes.

hcomp() should be called any time after findBlock(). pcomp() should
be called after the first call to decompress(). It may be called
after decompress(0), which allocates memory but produces no
decompressed output whether or not the output is postprocessed.
pcomp() returns true if postprocessing is used. Otherwise it returns
false and nothing is written to out2.


CHECKSUM VERIFICATION

  void setSHA1(SHA1* sha1ptr = 0);

tells the decompresser to compute the SHA-1 checksum of its output
by calling sha1ptr->put(ch) for each output byte ch. If sha1ptr
is 0 or omitted, then no checksum computation is done.

  void readSegmentEnd(char* sha1string);

reads the stored 20 byte checksum (if present) at the end of a segment
into the last 20 bytes of the 21 byte sha1string. The first byte is
1 to indicate the checksum is present, or 0 if absent.
Thus, checksums may be verified as follows:

  SHA1 sha1;
  d.setSHA1(&sha1);
  char sha1string[21];  
  while (d.findBlock()) {
    while (d.findFilename()) {
      d.readComment();
      d.decompress();
      d.readSegmentEnd(sha1string);
      if (sha1string[0]) {  // segment trailer has a checksum?
        if (memcmp(sha1string+1, sha1.result(), 20))
          printf("Verify error\n");
        else
          printf("Verify OK\n");
      }
      else
        printf("Not verified\n");
    }
  }


LISTING ARCHIVE CONTENTS

It is possible to read the contents of the archive headers and
trailers without decompressing the data. To do this, calls to
decompress() are omitted. It is possible to decompress part of
a block but it is an error to decompress any data if any earlier
data in the same block was skipped. For example, the following
will list the contents of an archive.

  double memory;
  OutputFile out(stdout);
  for (int i=1; d.findBlock(&memory)); ++i) {
    printf("Block %d needs %1.3f MB memory\n", i, memory/1e6);
    while (d.findFilename(out)) {
      printf(" ");
      d.readComment(out);
      printf("\n");
      // skip decompress();
      d.readSegmentEnd();
    }
  }


REVISION HISTORY

Sept. 27, 2010. Initial release v0.01, subject to change.

Sept. 28, 2010. v0.02 adds Compressor::hcomp() and pcomp().
Default args to compress() and decompress() changed to -1 = all.
Some bugs fixed. Added demo2.cpp.

Oct. 14, 2010. v0.03 changes Reader and Writer from template
parameters to virtual base classes.

Oct. 20, 2010. v0.04 separates custom models into libzpaqo.cpp,
plus minor fixes.
